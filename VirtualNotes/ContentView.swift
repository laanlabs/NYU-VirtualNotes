//
//  ContentView.swift
//  VirtualNoteTest
//
//  Created by jclaan on 4/3/22.
//

import SwiftUI
import RealityKit
import ARKit



struct ContentView : View {
    
    @State private var showContentOverlay = false
    @State private var showNotesMarkOverlay = false
    @State private var showNotesOverlay = false
    @State private var showContentMarkOverlay = true



    
    var body: some View {
        
        
        ZStack {
            
            //pass the notes overlay var to arview
            ARViewContainer(showContentOverlay: $showContentOverlay)
                .edgesIgnoringSafeArea(.all)
            if showContentMarkOverlay {
                
                ContentMarkOverlay(showContentOverlay: $showContentOverlay, showContentMarkOverlay: $showContentMarkOverlay)
                    .edgesIgnoringSafeArea(.all)

              
            }
            if showContentOverlay {
                
                ContentOverlay(showContentOverlay: $showContentOverlay)
                    .edgesIgnoringSafeArea(.all)
            }
            if showNotesMarkOverlay {
                
                NotesMarkOverlay(showNotesMarkOverlay: $showNotesMarkOverlay,showNotesOverlay: $showNotesOverlay)
                    .edgesIgnoringSafeArea(.all)

              
            }
            if showNotesOverlay {
                
                NotesOverlay(showNotesOverlay: $showNotesOverlay)
                    .edgesIgnoringSafeArea(.all)

              
            }
            UIOverlay(showContentMarkOverlay: $showContentMarkOverlay, showContentOverlay: $showContentOverlay, showNotesMarkOverlay: $showNotesMarkOverlay,showNotesOverlay:$showNotesOverlay)
                .edgesIgnoringSafeArea(.all)
            
            
            
        }
        
        
    
    }
}


//The AR View
struct ARViewContainer: UIViewRepresentable {
    
    
    @Binding public var showContentOverlay: Bool

    
    
    //Loads the reality composer file -- the method names are autogenerated from from the "Experience" Reality File
    let printerSceneAnchor = try! Experience.loadPrinterScene()
    
    func makeCoordinator() -> ARViewCoordinator {
        ARViewCoordinator(container: self)
    }
    
    
    func makeUIView(context: Context) -> ARView {
        
        let arView = ARView(frame: .zero)
        
        arView.session.delegate = context.coordinator

        
        
        
                        
        // Add the printerSceneAnchor anchor to the scene
        arView.scene.anchors.append(printerSceneAnchor)
        
        let printer = printerSceneAnchor.printerObj
//        let mesh = MeshResource.generateText(
//                    "1",
//                    extrusionDepth: 0.1,
//                    font: .systemFont(ofSize: 2),
//                    containerFrame: .zero,
//                    alignment: .left,
//                    lineBreakMode: .byTruncatingTail)
//
//                let material = SimpleMaterial(color: .red, isMetallic: false)
//                let entity = ModelEntity(mesh: mesh, materials: [material])
//                entity.scale = SIMD3<Float>(0.1, 0.1, 0.5)
//        entity.name = "ball1"
//        printer?.addChild(entity)
//
//
//
//        entity.setPosition(SIMD3<Float>(0, 3.5, 1), relativeTo: printer)
        printerSceneAnchor.ball1Obj?.setParent(printer, preservingWorldTransform: true)
//        printerSceneAnchor.ball1Obj?.setPosition(SIMD3<Float>(0, 3.5, 1), relativeTo: printer)
        //add touch guesters to scene
        arView.setupGestures()
        arView.installGestures(.all, for: printerSceneAnchor.printerObj as! HasCollision)

        
        
        

        
        return arView
        
    }
    
    func updateUIView(_ uiView: ARView, context: Context) {
    
        print("UPDATE UI")
        
        

    }
    

    func tapHandler( entity : Entity){
        
        //let us know what was tapped from the Experience Reality composer file
        print(entity.name.debugDescription)
        
        
        //turn on the notes overlay if the user touches the printer
        if entity.name == "ball1Obj" {
            showContentOverlay = true
            print(entity.name)
        }
        
    }
    
    
}



struct UIOverlay : View {
    
    @Binding public var showContentMarkOverlay: Bool
    @Binding public var showContentOverlay: Bool
    @Binding public var showNotesMarkOverlay: Bool
    @Binding public var showNotesOverlay: Bool
    
    
    var body: some View {
       
        VStack {
                
                    //show the view if toggel is on
                    //@todo - add segment controller
                
                    
                    HStack{
                        Rectangle()
                        .fill(Color.black.opacity(0.7))
                        .cornerRadius(15)
                        .frame(width: 50, height: 50)
                        .overlay(
                            Button(action:{
                                showContentOverlay = false; showNotesOverlay = false
                            }){
                                Image(systemName: "xmark")
                            }
                                .font(.system(size:30))
                                .foregroundColor(.white)
                        )
                        
                        Rectangle()
                        .fill(Color.black.opacity(0.7))
                        .cornerRadius(15)
                        .frame(width: 220, height: 50)
                        .overlay(
                            
                            HStack{
                                Rectangle()
                                    .fill(showContentMarkOverlay ? Color.black.opacity(0.7) : Color.black.opacity(0))
                                .cornerRadius(15)
                                .frame(width: 120, height: 40)
                                .overlay(
                                    Button(action:{
                                        showContentMarkOverlay = true; showNotesMarkOverlay = false; showNotesOverlay = false
                                    }){
                                        Text("Instructions")
                                            .padding(0)
                                            .font(.system(size:20))
                                            .foregroundColor(showContentMarkOverlay ? .purple : .white)
                                            .frame(width: 120, height: 50)
                                            .cornerRadius(15)
                                            
                                    }
                                )
                                
                                Rectangle()
                                .fill(showNotesMarkOverlay ? Color.black.opacity(0.7) : Color.black.opacity(0))
                                .cornerRadius(15)
                                .frame(width: 80, height: 40)
                                .overlay(
                                    Button(action:{
                                        showNotesMarkOverlay = true; showContentMarkOverlay = false; showContentOverlay = false
                                    }){
                                        Text("Notes")
                                            .padding(0)
                                            .font(.system(size:20))
                                            .foregroundColor(showNotesMarkOverlay ? .purple : .white)
                                            .frame(width: 120, height: 50)
                                            .cornerRadius(15)
                                            
                                    }
                                )
                                
                                
                                    
                                
                                
                                    
                            }
                        )
                        Circle()
                        .fill(Color.black.opacity(0.7))
                        .cornerRadius(15)
                        .frame(width: 50, height: 50)
                        .overlay(
                            Button(action:{
                                showContentOverlay.toggle()
                            }){
                                Image(systemName: "ellipsis")
                            }
                                .font(.system(size:30))
                                .foregroundColor(.white)
                        )
                        
                      
                        
                    }.padding(.top, 80)
                Spacer()
        }.padding(.bottom, 20)
    }
    
    
}
struct NotesMarkOverlay: View {
    @Binding public var showNotesMarkOverlay: Bool
    @Binding public var showNotesOverlay: Bool

    
    var body: some View {
            
            VStack {
                Spacer()
                Circle()
                    .fill(showNotesOverlay ? Color.purple : Color.white.opacity(0.7))
                .frame(width: 70, height: 70)
                .overlay(
                    Button(action:{
                        showNotesOverlay = true
                    }){
                        Image(systemName: "plus")
                    }
                        .font(.system(size:30))
                        .foregroundColor(showNotesOverlay ? .white : .black)
                ).padding(.bottom,50)
               
            }
       
        
        
        
    }
}

struct ContentMarkOverlay: View {
    @Binding public var showContentOverlay: Bool
    @Binding public var showContentMarkOverlay: Bool

    
    var body: some View {
            
            VStack {
//                Circle()
//                    .strokeBorder(Color.white, lineWidth: 5)
//                    .background(Circle().fill(Color.purple))
//                    .frame(width:50, height:50)
//
//                    .overlay(
//                        Button(action:{
//                            showContentOverlay.toggle()
//                        }
//                        ){
//                            Text("1")
//                                .bold()
//                                .foregroundColor(.white)
//
//                        }
//
//                    )
            }
       
        
        
        
    }
}

struct NotesOverlay: View {
    @State var notes: String = ""

    @Binding public var showNotesOverlay: Bool

    
    var body: some View {

        ZStack {
        
            RoundedRectangle(cornerRadius: 0, style: .continuous)
                .fill(.purple.opacity(0.85))
            
            VStack {
                
                TextField("**Lucas:** Enter a description", text: $notes)
                    .padding(.horizontal, 60)
                    .padding(.top, 0)
                    .font(Font.system(size: 14))
                    
                    .background(RoundedRectangle(cornerRadius: 5)
                        .fill(Color.white)
                        .frame(width:280,height:150))
                    .foregroundColor(.black)
                    
                   
                Button(action: {
                    // What to perform
                    print($notes)
                }) {
                    // How the button looks like
                    Rectangle()
                        .fill(Color.white.opacity(0.9))
                        .frame(maxWidth:120,maxHeight:40)
                        .cornerRadius(3)
                        .overlay(
                            Text("Next Step")
                                .foregroundColor(.black)
                                .cornerRadius(3)
                                
                        )
                        .padding()
                        .padding(.top,60)
                        
                    
                            
                }
                
//                Image(systemName: "folder")
//                    .foregroundColor(.gray)
//                    .padding()
                
                


                
            
            }
        }
        
        
        
    }
}

struct ContentOverlay: View {
    @State var notes: String = ""

    @Binding public var showContentOverlay: Bool

    
    var body: some View {

        ZStack {
        
            RoundedRectangle(cornerRadius: 0, style: .continuous)
                .fill(.purple.opacity(0.85))
            
            Rectangle()
                .fill(Color.white.opacity(0.9))
                .cornerRadius(10)
                .frame(maxWidth:250, maxHeight: 220)
                .overlay(
                    VStack{
                        Text("Step 1")
                            .font(.title2)
                            .foregroundColor(Color.blue)
                            .padding(.bottom, 5)
                        Text("Once you have created or chosen a design,you must either export or download the STL file. The STL file is what stores the information about your conceptual 3D object.")
                            .font(.system(size: 12))
                            .multilineTextAlignment(.center)
                            .padding(.horizontal,10)
                            
                        Divider()
                        Text("Instructor Notes")
                            .font(.title2)
                            .foregroundColor(Color.blue)
                            .padding(.bottom, 5)
                        Text("Be sure your laptop connect with “Ultimaker 2+”")
                            .font(.system(size: 12))
                            .multilineTextAlignment(.center)
                            .padding(.horizontal,10)
                        
                    }
                )
            VStack {
                Spacer()
                Circle()
                    .strokeBorder(Color.white, lineWidth: 5)
                    .background(Circle().fill(Color.purple))
                    .frame(width:50, height:50)
            
                    .overlay(
                        Text("1")
                            .bold()
                            .foregroundColor(.white)
                        
                    
                    )
                    .padding(.bottom,30)
            }
            
        }
        
        
        
    }
}



#if DEBUG
struct ContentView_Previews : PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
#endif



// @TODO: move this to extension class

//MARK: AR View Touch Event Extention

extension ARView{
    
    func setupGestures() {
        let tap = UITapGestureRecognizer(target: self, action: #selector(self.handleTap(_:)))
        self.addGestureRecognizer(tap)
    }
    
    @objc func handleTap(_ sender: UITapGestureRecognizer? = nil) {
        guard let coordinator = self.session.delegate as? ARViewCoordinator else{ print("arscene coordinator error"); return }
        guard let touchInView = sender?.location(in: self) else {
            return
        }

        let entities = self.entities(at: touchInView)
        
        //print(self.entity(at: touchInView)?.name.debugDescription ?? "")
        //print(self.entity(at: touchInView)?.position.debugDescription ?? "")
        
        //for single entitle
        if let entityTouched = self.entity(at: touchInView) {
            
            coordinator.tapHandler(entity: entityTouched)

        }
        
        //for multitple entities
        if !entities.isEmpty {
            
        }
    }
}


//MARK: Coordinator -- pass touch events back from  arview

class ARViewCoordinator: NSObject, ARSessionDelegate {
    var parent: ARViewContainer
    
    init(container: ARViewContainer) {
        self.parent = container
    }
    
    public func tapHandler( entity : Entity){

        self.parent.tapHandler(entity: entity)
        

    }

}
